"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logger_constants_1 = require("./logger_constants");
const winston = require("winston");
class LoggerConfig {
}
exports.logger = (config) => {
    const getDefaultConfig = () => {
        let defaultConfig = new LoggerConfig;
        if (logger_constants_1.LOGGER_CONSOLE_ENABLE == 'true') {
            defaultConfig.console = {
                level: 'silly',
                format: winston.format.combine(winston.format.timestamp(), winston.format.align())
            };
        }
        if (logger_constants_1.LOGGER_FILE_ENABLE == 'true') {
            defaultConfig.file = {
                level: 'info',
                filename: 'logs.log',
                format: winston.format.combine(winston.format.timestamp(), winston.format.json(), winston.format.align())
            };
        }
        return defaultConfig;
    };
    const setConfigFromEnvironment = (config) => {
        if (logger_constants_1.LOGGER_GLOBAL_LEVEL) {
            config.level = logger_constants_1.LOGGER_GLOBAL_LEVEL;
        }
        if (logger_constants_1.LOGGER_CONSOLE_ENABLE == 'true') {
            let consoleConfig = config.console || {};
            if (logger_constants_1.LOGGER_CONSOLE_LEVEL) {
                consoleConfig.level = logger_constants_1.LOGGER_CONSOLE_LEVEL;
            }
            config.console = consoleConfig;
        }
        if (logger_constants_1.LOGGER_FILE_ENABLE == 'true') {
            let fileConfig = config.file || {};
            if (logger_constants_1.LOGGER_FILE_LEVEL) {
                fileConfig.level = logger_constants_1.LOGGER_FILE_LEVEL;
            }
            if (logger_constants_1.LOGGER_FILE_FILE_NAME) {
                fileConfig.filename = logger_constants_1.LOGGER_FILE_FILE_NAME;
            }
            config.file = fileConfig;
        }
    };
    config = config || {};
    let defaultConfig = getDefaultConfig();
    let localConfigs = Object.assign(defaultConfig, config);
    setConfigFromEnvironment(localConfigs);
    let transports = [];
    if (localConfigs.console) {
        transports.push(new winston.transports.Console(localConfigs.console));
    }
    if (localConfigs.file) {
        transports.push(new winston.transports.File(localConfigs.file));
    }
    let finalConfig = {};
    if (localConfigs.level) {
        finalConfig.level = localConfigs.level;
    }
    finalConfig.transports = transports;
    const logger = winston.createLogger(finalConfig);
    return logger;
};
//# sourceMappingURL=index.js.map