import { LOGGER_CONSOLE_ENABLE,
    LOGGER_CONSOLE_LEVEL,
    LOGGER_FILE_ENABLE,
    LOGGER_FILE_FILE_NAME,
    LOGGER_FILE_LEVEL,
    LOGGER_GLOBAL_LEVEL } from './logger_constants'
import * as winston from 'winston'

class LoggerConfig {
    public console: winston.transports.ConsoleTransportOptions
    public file: winston.transports.FileTransportOptions
}

export const logger = (config: any) => {
    const getDefaultConfig = () => {
        let defaultConfig = new LoggerConfig

        if (LOGGER_CONSOLE_ENABLE == 'true') {
            defaultConfig.console = {
                level: 'silly',
                format: winston.format.combine(
                    winston.format.timestamp(),
                    winston.format.align()
                )
            }
        }

        if (LOGGER_FILE_ENABLE == 'true') {
            defaultConfig.file = {
                level: 'info',
                filename: 'logs.log',
                format: winston.format.combine(
                    winston.format.timestamp(),
                    winston.format.json(),
                    winston.format.align()
                )
            }
        }

        return defaultConfig
    }

    const setConfigFromEnvironment = (config: any) => {
        if (LOGGER_GLOBAL_LEVEL) {
            config.level = LOGGER_GLOBAL_LEVEL
        }
        if (LOGGER_CONSOLE_ENABLE == 'true') {
            let consoleConfig = config.console || {}

            if (LOGGER_CONSOLE_LEVEL) {
                consoleConfig.level = LOGGER_CONSOLE_LEVEL
            }
            config.console = consoleConfig
        }
        if (LOGGER_FILE_ENABLE == 'true') {
            let fileConfig = config.file || {}

            if (LOGGER_FILE_LEVEL) {
                fileConfig.level = LOGGER_FILE_LEVEL
            }
            if (LOGGER_FILE_FILE_NAME) {
                fileConfig.filename = LOGGER_FILE_FILE_NAME
            }
            config.file = fileConfig
        }
    }    

    config = config || {}
    let defaultConfig = getDefaultConfig()
    let localConfigs = Object.assign(defaultConfig, config)
    setConfigFromEnvironment(localConfigs)

    let transports = []
    if (localConfigs.console) {
        transports.push(new winston.transports.Console(localConfigs.console))
    }

    if (localConfigs.file) {
        transports.push(new winston.transports.File(localConfigs.file))
    }
    let finalConfig: winston.LoggerOptions = {}

    if (localConfigs.level) {
        finalConfig.level = localConfigs.level
    }
    finalConfig.transports = transports
    const logger = winston.createLogger(finalConfig)

    return logger
}
