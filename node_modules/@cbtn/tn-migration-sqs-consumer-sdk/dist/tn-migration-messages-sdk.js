"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tnMigrationMessagesSDK = void 0;
const constants_1 = require("./constants");
const aws_sdk_1 = __importDefault(require("aws-sdk"));
const uuid_1 = require("uuid");
const enums_1 = require("./enums");
exports.tnMigrationMessagesSDK = () => {
    aws_sdk_1.default.config.update({
        region: constants_1.SQS_REGION
    });
    const sqs = new aws_sdk_1.default.SQS();
    const createProcess = (tnDid) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            if (!tnDid) {
            }
            const sqsMessage = {
                name: "tn:migrate:v3:create",
                process_id: UUID(),
                data: {
                    tn_did: tnDid,
                    status: "New"
                }
            };
            return yield send(JSON.stringify(sqsMessage), sqsMessage === null || sqsMessage === void 0 ? void 0 : sqsMessage.process_id);
        }
        catch (err) {
        }
    });
    const createFinishProcess = (processId, data) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            if (!processId || !data.tn_did || !data.source_domain || !data.target_domain) {
            }
            const sqsMessage = {
                name: "tn:migrate:v3:finish_start",
                process_id: processId,
                data: Object.assign(Object.assign({}, data), { status: "New" })
            };
            return yield send(JSON.stringify(sqsMessage), sqsMessage === null || sqsMessage === void 0 ? void 0 : sqsMessage.process_id);
        }
        catch (err) {
        }
    });
    const runProcessStep = (stepData, status) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            const sqsMessage = {
                name: stepData === null || stepData === void 0 ? void 0 : stepData.name,
                process_id: stepData === null || stepData === void 0 ? void 0 : stepData.process_id,
                data: Object.assign(Object.assign({}, stepData === null || stepData === void 0 ? void 0 : stepData.data), { status: status || "New" })
            };
            if (stepData === null || stepData === void 0 ? void 0 : stepData.id) {
                sqsMessage.step_id = stepData === null || stepData === void 0 ? void 0 : stepData.id;
            }
            return yield send(JSON.stringify(sqsMessage), sqsMessage === null || sqsMessage === void 0 ? void 0 : sqsMessage.process_id);
        }
        catch (err) {
        }
    });
    const mapWorkflowToStep = (message, targetStepId) => {
        var _a, _b;
        try {
            const sqsMessage = {
                name: message === null || message === void 0 ? void 0 : message.source_name,
                process_id: (_a = message === null || message === void 0 ? void 0 : message.source_data) === null || _a === void 0 ? void 0 : _a.process_id,
                data: (_b = message === null || message === void 0 ? void 0 : message.source_data) === null || _b === void 0 ? void 0 : _b.data,
            };
            if (targetStepId) {
                sqsMessage.step_id = targetStepId;
            }
            return sqsMessage;
        }
        catch (err) {
        }
    };
    const sendStepMessage = (message, targetStepId) => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
        try {
            const finishWorkflow = isSupportedFinishWorkflowAction((_b = (_a = message === null || message === void 0 ? void 0 : message.source_data) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.finish_workflow) ? (_d = (_c = message === null || message === void 0 ? void 0 : message.source_data) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.finish_workflow : null;
            const nextStep = getNextStep(message === null || message === void 0 ? void 0 : message.source_name, (_f = (_e = message === null || message === void 0 ? void 0 : message.source_data) === null || _e === void 0 ? void 0 : _e.data) === null || _f === void 0 ? void 0 : _f.template, finishWorkflow);
            if (nextStep === "unknown") {
            }
            const sqsMessage = {
                name: nextStep,
                process_id: (_g = message === null || message === void 0 ? void 0 : message.source_data) === null || _g === void 0 ? void 0 : _g.process_id,
                step_id: targetStepId,
                data: {
                    tn_did: (_j = (_h = message === null || message === void 0 ? void 0 : message.source_data) === null || _h === void 0 ? void 0 : _h.data) === null || _j === void 0 ? void 0 : _j.tn_did,
                    status: ((_l = (_k = message === null || message === void 0 ? void 0 : message.source_data) === null || _k === void 0 ? void 0 : _k.data) === null || _l === void 0 ? void 0 : _l.status) || "New",
                },
            };
            if ((_o = (_m = message === null || message === void 0 ? void 0 : message.source_data) === null || _m === void 0 ? void 0 : _m.data) === null || _o === void 0 ? void 0 : _o.source_domain) {
                sqsMessage.data.source_domain = message.source_data.data.source_domain;
            }
            if ((_q = (_p = message === null || message === void 0 ? void 0 : message.source_data) === null || _p === void 0 ? void 0 : _p.data) === null || _q === void 0 ? void 0 : _q.target_domain) {
                sqsMessage.data.target_domain = message.source_data.data.target_domain;
            }
            if ((_s = (_r = message === null || message === void 0 ? void 0 : message.source_data) === null || _r === void 0 ? void 0 : _r.data) === null || _s === void 0 ? void 0 : _s.template) {
                sqsMessage.data.template = message.source_data.data.template;
            }
            if ((_u = (_t = message === null || message === void 0 ? void 0 : message.source_data) === null || _t === void 0 ? void 0 : _t.data) === null || _u === void 0 ? void 0 : _u.finish_workflow) {
                sqsMessage.data.finish_workflow = message.source_data.data.finish_workflow;
            }
            return yield send(JSON.stringify(sqsMessage), sqsMessage === null || sqsMessage === void 0 ? void 0 : sqsMessage.process_id);
        }
        catch (err) {
        }
    });
    const sendWorkflowMessage = (message) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            const sqsMessage = {
                name: "workflow:step:complete",
                workflow: "tn:migrate:v3",
                source_name: message === null || message === void 0 ? void 0 : message.name,
                source_id: message === null || message === void 0 ? void 0 : message.step_id,
                source_data: {
                    process_id: message === null || message === void 0 ? void 0 : message.process_id,
                    data: message === null || message === void 0 ? void 0 : message.data
                }
            };
            return yield send(JSON.stringify(sqsMessage), message === null || message === void 0 ? void 0 : message.process_id);
        }
        catch (err) {
        }
    });
    const getNextStep = (currentStep, template, finishWorkflowAction) => {
        let _template;
        if (template === "academy" || currentStep.includes("academy")) {
            _template = "academy";
        }
        else if (template === "bravo" || currentStep.includes("bravo")) {
            _template = "bravo";
        }
        else {
            _template = "unsupported";
        }
        if (currentStep && !finishWorkflowAction) {
            if (_template === "academy") {
                switch (currentStep) {
                    case "tn:migrate:v3:create":
                        return "tn:migrate:v3:academy:start";
                    case "tn:migrate:v3:academy:start":
                        return "tn:migrate:v3:academy:domain";
                    case "tn:migrate:v3:academy:domain":
                        return "tn:migrate:v3:academy:base_copy";
                    case "tn:migrate:v3:academy:base_copy":
                        return "tn:migrate:v3:academy:landing_copy";
                    case "tn:migrate:v3:academy:landing_copy":
                        return "tn:migrate:v3:academy:custom_content_copy";
                    case "tn:migrate:v3:academy:custom_content_copy":
                        return "tn:migrate:v3:academy:featured_page_copy";
                    case "tn:migrate:v3:academy:featured_page_copy":
                        return "tn:migrate:v3:academy:social_copy";
                    case "tn:migrate:v3:academy:social_copy":
                        return "tn:migrate:v3:academy:pp_t&c_copy";
                    case "tn:migrate:v3:academy:pp_t&c_copy":
                        return "tn:migrate:v3:academy:join_content_copy";
                    case "tn:migrate:v3:academy:join_content_copy":
                        return "tn:migrate:v3:academy:navigation_copy";
                    case "tn:migrate:v3:academy:navigation_copy":
                        return "tn:migrate:v3:complete";
                    default:
                        return "unknown";
                }
            }
            else if (_template === "bravo") {
                switch (currentStep) {
                    case "tn:migrate:v3:create":
                        return "tn:migrate:v3:bravo:start";
                    case "tn:migrate:v3:bravo:start":
                        return "tn:migrate:v3:bravo:domain";
                    case "tn:migrate:v3:bravo:domain":
                        return "tn:migrate:v3:bravo:base_copy";
                    case "tn:migrate:v3:bravo:base_copy":
                        return "tn:migrate:v3:bravo:social_copy";
                    case "tn:migrate:v3:bravo:social_copy":
                        return "tn:migrate:v3:bravo:join_content_copy";
                    case "tn:migrate:v3:bravo:join_content_copy":
                        return "tn:migrate:v3:bravo:navigation_copy";
                    case "tn:migrate:v3:bravo:navigation_copy":
                        return "tn:migrate:v3:complete";
                    default:
                        return "unknown";
                }
            }
        }
        else if (currentStep && finishWorkflowAction) {
            switch (currentStep) {
                case "tn:migrate:v3:finish_start":
                    switch (finishWorkflowAction) {
                        case enums_1.FinishWorkflow.Redirect:
                            return "tn:migrate:v3:redirect";
                        case enums_1.FinishWorkflow.Subdomain:
                            return "tn:migrate:v3:redirect";
                        case enums_1.FinishWorkflow.Vanity:
                            return "tn:migrate:v3:complete_vanity";
                        default:
                            return "unknown";
                    }
                case "tn:migrate:v3:redirect":
                case "tn:migrate:v3:complete_vanity":
                    return "tn:migrate:v3:complete";
                default:
                    return "unknown";
            }
        }
        return "unknown";
    };
    const send = (message, messageGroupId) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            if (!messageGroupId) {
                throw new Error(`Invalid Message Group ID`);
            }
            const params = {
                MessageBody: message,
                QueueUrl: constants_1.SQS_TN_MIGRATION,
                MessageGroupId: messageGroupId
            };
            const publishMessage = yield sqs.sendMessage(params).promise();
            const res = {
                status: "Success",
                metadata: publishMessage
            };
            return res;
        }
        catch (err) {
            const res = {
                status: "Failure",
                metadata: err
            };
            throw res;
        }
    });
    const isSupportedFinishWorkflowAction = (action) => {
        if (action && Object.values(enums_1.FinishWorkflow).includes(action)) {
            return true;
        }
        return false;
    };
    const UUID = () => {
        const token = uuid_1.v4();
        return token;
    };
    return {
        createProcess,
        createFinishProcess,
        runProcessStep,
        sendWorkflowMessage,
        sendStepMessage,
        getNextStep,
        send,
        mapWorkflowToStep
    };
};
//# sourceMappingURL=tn-migration-messages-sdk.js.map